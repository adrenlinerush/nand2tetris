// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:

    //Zero X if zx
    Mux16 (a=x, b=false, sel=zx, out=xm1);
    
    //Negate X if nx
    Not16 (in=xm1, out=xn1);
    Mux16 (a=xm1, b=xn1, sel=nx, out=xm2);

    //Zero Y if zy
    Mux16 (a=y, b=false, sel=zy, out=ym1);
    
    //Negate Y if ny
    Not16 (in=ym1, out=yn1);
    Mux16 (a=ym1, b=yn1, sel=ny, out=ym2);
    
    //X+Y or X&Y conditionaly
    Add16 (a=xm2, b=ym2, out=xysum);
    And16 (a=xm2, b=ym2, out=xyand);
    Mux16 (a=xyand, b=xysum, sel=f, out=xysa);

    //If No and Output
    Not16 (in=xysa, out=nxysa);
    Mux16 (a=xysa, b=nxysa, sel=no, out[15]=ng, out[0..7]=outL, out[8..15]=outH, out=out);

    //set zr
    Or8Way(in=outL, out=zrA);
    Or8Way(in=outH, out=zrB);
    Or(a=zrA, b=zrB, out=zrC);
    Not(in=zrC, out=zr);

}
