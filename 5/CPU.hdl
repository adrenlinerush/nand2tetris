// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Mux16 (a=instruction, b=ALUout, sel=instruction[15], out=toA);
    Not (in=instruction[15],out=isAinst);
    Or (a=isAinst,b=instruction[5],out=bLoadA);

    ARegister (in=toA, load=bLoadA, out=Aout, out[0..14]=addressM); // A reg
    And (a=instruction[15],b=instruction[4],out=dregload);
    DRegister (in=ALUout, load=dregload, out=Dout ); // D reg

    Mux16 (a=Aout, b=inM, sel=instruction[12], out=ALUy);
    And (a=instruction[3], b=instruction[15], out=writeM);

    ALU (y=ALUy, x=Dout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zero, ng=neg);

    Xor (a=neg,b=zero,out=notpos);
    Not (in=notpos,out=pos);
    And (a=instruction[1],b=zero,out=iszero);
    And (a=instruction[2],b=neg,out=isneg);
    And (a=instruction[0],b=pos,out=ispos);
    Xor (a=iszero,b=isneg,out=jor);
    Xor (a=jor,b=ispos,out=jor2);
    And (a=jor2,b=instruction[15],out=jmp);
 
    Not (in=jmp, out=inc);
    PC (in=Aout, inc=inc, load=jmp, reset=reset, out[0..14]=pc);

}
